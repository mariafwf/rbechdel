---
title: "Project 1"
author: "Maria Figueiredo"
toc: true
number-sections: true
highlight-style: pygments
format:
  html
---

# Import

```{r}
#| warning: false
library(dplyr)
library(tidyverse)
library(tibble)
```

```{r}
movies <- read.csv("movies.csv")
```

# Clean

```{r}
#| warning: false
movies <- movies |>
  subset(select = -c(imdb_id, error, poster, type, imdb, imdb_votes, code, period_code, decade_code, released, response, runtime, awards, actors, writer, director))
```

```{r}
glimpse(movies)
```

The `clean_test` variable gives us the reasons why a certain movie failed the Bechdel Test. We can use the `count()` function to extract all possible values.

```{r}
movies |>
  count(clean_test)
```
Here, `nowomen` includes movies that had no women in them (rating 0), `notalk` includes movies that had women in them, but they did not talk to each other (rating 1), and `men` includes movies that had women that talked to each other, but only about men (rating 2). The tag `dubious` is given to those movies that caused some skepticism about whether or not they pass the test, but ultimately received the FAIL label. In contrast, `ok` denotes movies that passed the Bechdel Test.

We can check the accuracy of those designations by cross-referencing them with the columns `binary`, which reduces the classification to PASS/FAIL according to the Bechdel Test conditions.

```{r}
movies |>
  group_by(clean_test) |>
  count(binary)
```
While the labels certainly help us understand the reasons behind each failure, they are not the easiest data to work with. The `mutate` function can help us convert the labels into numerical values within [0,3], according to the Bechdel rule. Since `dubious` does not fall into a specific category, we convert it into an additional `-1` rating level. We then store those values into a new column named `rating`.

```{r}
rating <- c(0)
movies <- movies |>
  add_column(rating, .before = 4) |>
  mutate(rating = case_when(
    clean_test == "dubious" ~ -1,
    clean_test == "nowomen" ~ 0,
    clean_test == "notalk" ~ 1,
    clean_test == "men" ~ 2,
    clean_test == "ok" ~ 3)
  )
```

```{r}
glimpse(movies)
```

For an added layer of organization, we can also categorize the ratings as different levels with the `factor` function.



Now that we have a clean dataset with

use aggregate to calculate mean per year
# general frequency trends
# distribution by release year

```{r}
movies |>
  group_by(year) |>
  count() |>
  ggplot() + geom_line(aes(year, n, group = 1))
```

```{r}
library(lattice)
library(udpipe)
```


```{r}
udmodel <- udpipe_load_model(file = 'english-ewt-ud-2.5-191206.udpipe')
s <- udpipe_annotate(udmodel, movies$plot)
x <- data.frame(s)
stats <- txt_freq(x$upos)
stats$key <- factor(stats$key, levels = rev(stats$key))
```

```{r}
## NOUNS
stats <- subset(x, upos %in% c("NOUN")) 
stats <- txt_freq(stats$token)
stats$key <- factor(stats$key, levels = rev(stats$key))
barchart(key ~ freq, data = head(stats, 20), col = "cadetblue", 
         main = "Most occurring nouns", xlab = "Freq")
```
```{r}
## ADJECTIVES
stats <- subset(x, upos %in% c("ADJ")) 
stats <- txt_freq(stats$token)
stats$key <- factor(stats$key, levels = rev(stats$key))
barchart(key ~ freq, data = head(stats, 20), col = "purple", 
         main = "Most occurring adjectives", xlab = "Freq")
```

```{r}
## VERBS
stats <- subset(x, upos %in% c("VERB")) 
stats <- txt_freq(stats$token)
stats$key <- factor(stats$key, levels = rev(stats$key))
barchart(key ~ freq, data = head(stats, 20), col = "gold", 
         main = "Most occurring Verbs", xlab = "Freq")
```
```{r}
## Using RAKE
stats <- keywords_rake(x = x, term = "lemma", group = "doc_id", 
                       relevant = x$upos %in% c("NOUN", "ADJ"))
stats$key <- factor(stats$keyword, levels = rev(stats$keyword))
barchart(key ~ rake, data = head(subset(stats, freq > 3), 20), col = "red", 
         main = "Keywords identified by RAKE", 
         xlab = "Rake")
```

```{r}
## Using a sequence of POS tags (noun phrases / verb phrases)
x$phrase_tag <- as_phrasemachine(x$upos, type = "upos")
stats <- keywords_phrases(x = x$phrase_tag, term = tolower(x$token), 
                          pattern = "(A|N)*N(P+D*(A|N)*N)*", 
                          is_regex = TRUE, detailed = FALSE)
stats <- subset(stats, ngram > 1 & freq > 3)
stats$key <- factor(stats$keyword, levels = rev(stats$keyword))
barchart(key ~ freq, data = head(stats, 20), col = "magenta", 
         main = "Keywords - simple noun phrases", xlab = "Frequency")
```
This classification can be used 
imdb score
plot keywords
genre